import asyncio
import logging
import re
from aiogram import Bot, Dispatcher, types, html, F
from aiogram.filters import Command, CommandStart, or_f, CommandObject
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.utils.formatting import Text, Bold, as_list, as_marked_section, as_key_value, HashTag
from datetime import datetime

import config

def get_msg(text: str):
    return text.split('_')[-1]


logging.basicConfig(level=logging.INFO)
# bot = Bot(token=config.TOKEN)
bot = Bot(token=config.TOKEN, parse_mode="HTML") # –¥–ª—è –≤—Å–µ–≥–æ –±–æ—Ç–∞ –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
dp = Dispatcher()

# –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä F.text, —Ç–æ —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é /test
@dp.message(F.text, Command("test1"))
async def any_message(message: Message):
    user = message.from_user.first_name
    await message.answer(f"Hello, <b>{user}</b>! | HTML", parse_mode=ParseMode.HTML)
    # MARKDOWN 1—è –≤–µ—Ä—Å–∏—è - —É—Ä–µ–∑–∞–Ω–Ω–∞—è
    # –¢–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (\) –º–Ω–æ–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    await message.answer(f"Hello, *{user}*\! \| MARKDOWN\_V2", parse_mode=ParseMode.MARKDOWN_V2)

@dp.message(F.text, Command("test2"))
async def any_message(message: Message):
    user = message.from_user.first_name
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å <u>HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π</u>")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ <s>–∫–∞–∫–æ–π-–ª–∏–±–æ —Ä–∞–∑–º–µ—Ç–∫–∏</s>", parse_mode=None)

# –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–∏–º–æ–ª—ã < > –Ω–µ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω —Ç–∫ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–≥–∞
@dp.message(Command("hello"))
async def cmd_hello(message: Message):
    await message.answer(f"Hello, <b>{message.from_user.full_name}</b>") # , parse_mode=ParseMode.HTML

# 1–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è
@dp.message(Command("hello1"))
async def cmd_hello1(message: Message):
    await message.answer(f"Hello, {html.bold(html.quote(message.from_user.full_name))}")

# 2–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ë–û–õ–ï–ï –ü–†–û–î–í–ò–ù–£–¢–û–ï
# **content.as_kwargs() –≤–µ—Ä–Ω—ë—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã text, entities, parse_mode –∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –∏—Ö –≤ –≤—ã–∑–æ–≤ answer().
# content.as_html() –º–æ–∂–Ω–æ –∏ —Ç–∞–∫
@dp.message(Command("hello2"))
async def cmd_hello2(message: Message):
    content = Text("Hello, ", Bold(message.from_user.full_name))
    await message.answer(**content.as_kwargs())


# –ø—Ä–æ–≤–µ—Ä—é 1–π —Å–ø–æ—Å–æ–±:
@dp.message(F.text.lower().startswith("/hello1_"))
async def check_hello1(message: Message):
    await message.answer(f"Hello, {html.bold(html.quote(get_msg(message.text)))}")

# –ø—Ä–æ–≤–µ—Ä—é 2–π —Å–ø–æ—Å–æ–±:
@dp.message(F.text.casefold().startswith("/hello2_")) # casefold() - –∞–Ω–∞–ª–æ–≥ lower()
async def check_hello2(message: Message):
    content = Text("Hello, ", Bold(get_msg(message.text)))
    await message.answer(**content.as_kwargs())
    await message.answer(content.as_html()) # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ —Å—Ç—Ä–æ–∫–µ –≤—ã—à–µ

@dp.message(Command("advanced_example"))
async def cmd_advanced_example(message: Message):
    content = as_list(
        as_marked_section(
            Bold("Success:"),
            "Test 1",
            "Test 3",
            "Test 4",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("Failed:"),
            "Test 2",
            marker="‚ùå ",
        ),
        as_marked_section(
            Bold("Summary:"),
            as_key_value("Total", 4),
            as_key_value("Success", 3),
            as_key_value("Failed", 1),
            marker="  ",
        ),
        HashTag("#test"),
        sep="\n\n",
    )
    await message.answer(**content.as_kwargs())
# –†–∞–±–æ—Ç–∞ —Å message.entities - –¢–µ–ª–µ–≥—Ä–∞–º–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ–∫–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:
# [MessageEntity(type='url', offset=50, length=9, url=None, user=None, language=None, custom_emoji_id=None),
#  MessageEntity(type='email', offset=88, length=13, url=None, user=None, language=None, custom_emoji_id=None),
#  MessageEntity(type='phone_number', offset=226, length=16, url=None, user=None, language=None, custom_emoji_id=None)]
# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
# –ü—Ä–∏–≤–µ—Ç, –±–æ—Ç! –í–æ—Ç —Ç–≤–æ–∏ üîë —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ yandex.ru:
# –ó–∞–π—Ç–∏ –º–æ–∂–µ—à—å –Ω–∞ –ø–æ—á—Ç—É üìß bot@yandex.ru.
# –¢–≤–æ–π –ø–∞—Ä–æ–ª—å: Super34–∫56–ª234–∫–µ–ï67.
# pass: 111, # password: 222, # code: 333.
# –ë—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –∑–≤–æ–Ω–∏ –º–Ω–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üì±: +7-911-555-66-77
# –ú–æ–π –Ω–∏–∫ Robot555
# –¢–æ–ª—å–∫–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –æ—à–∏–±–∏—Å—å!
@dp.message(or_f(F.text.contains('üîë'), F.text.contains('üìß'), F.text.contains('üì±')))
async def extract_data(message: Message):
    dataR = {
        "url": "<N/A>",
        "email": "<N/A>",
        'phone_number': "<N/A>",
        "code": "<N/A>"
    }
    dataW = dataR.copy()
    entities = message.entities or []
    print(entities)
    for item in entities:
        await message.answer(f'–ï—Å—Ç—å –ø–æ–ª–µ: "{item.type}"')
        if item.type in dataR.keys():
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ
            dataR[item.type] = item.extract_from(message.text)
        if item.type in dataW.keys():
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
            dataW[item.type] = message.text[item.offset : item.offset+item.length]
    for data in (dataR, dataW):
        await message.reply(
            f"{'–ü—Ä–∞–≤–∏–ª—å–Ω–æ' if data == dataR else '–ù–ï–ø—Ä–∞–≤–∏–ª—å–Ω–æ'} | –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n"
            f"URL: {html.quote(data['url'])}\n"
            f"E-mail: {html.quote(data['email'])}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(data['phone_number'])}\n"
            f"–ü–∞—Ä–æ–ª—å: {html.quote(data['code'])}" # 2024-04-03 telegramm –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–∏–ø code (–ø–∞—Ä–æ–ª—å)
        )
# –ö–æ–º–∞–Ω–¥–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
@dp.message(Command("set_timer"))
async def cmd_settimer(message: Message, command: CommandObject):
    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∏–∫–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç–æ command.args –±—É–¥–µ—Ç None
    example_info = "–ü—Ä–∏–º–µ—Ä: /settimer (time) (message)"
    if command.args is None:
        await message.answer(f"–û—à–∏–±–∫–∞ | –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n{example_info}")
        return
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Å—Ç—Ä–µ—á–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É
    try:
        delay_time, text_to_send = command.args.split(" ", maxsplit=1)
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π, –≤—ã–ª–µ—Ç–∏—Ç ValueError
    except ValueError:
        await message.answer(f"–û—à–∏–±–∫–∞ | –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n{example_info}")
        return
    await message.answer(
        "–¢–∞–π–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–í—Ä–µ–º—è: {delay_time}\n"
        f"–¢–µ–∫—Å—Ç: {text_to_send}"
    )
# –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
@dp.message(Command("custom", prefix="%!/"))
async def cmd_custom1(message: Message):
    await message.answer('–í–∏–∂—É –∫–æ–º–∞–Ω–¥—É "custom1" c —ç—Ç–∏–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏: % ! /')


# –î–ò–ü–õ–ò–ù–ö–ò –∫ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ä—Ç
# –º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤–∏–¥–∞ t.me/bot?start=xxx # –∏ –ø—Ä–µ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# –ø–æ–∫–∞–∂—É—Ç –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ /start xxx.
# –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∫—É—á–∏ —Ä–∞–∑–Ω—ã—Ö –≤–µ—â–µ–π: —à–æ—Ä—Ç–∫–∞—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –±—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ç.–¥..

#/start help
# t.me/besedin_pizza_bot?start=help
@dp.message(Command("help"))
@dp.message(CommandStart(deep_link=True, magic=F.args == "help"))
async def cmd_start_help(message: Message):
    await message.answer("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π")
    await message.answer('–ù–û —Å–Ω–∞—á–∞–ª–∞ –∫–∏–Ω–µ–º –∫–æ—Å—Ç–∏:')
    await message.answer_dice('üé≤')
#/start book_587
# t.me/besedin_pizza_bot?start=book_587
@dp.message(CommandStart(deep_link=True, magic=F.args.regexp(re.compile(r'book_(\d+)'))))
async def cmd_start_book(message: Message, command: CommandObject):
    book_number = command.args.split("_")[1]
    await message.answer(f"Sending book ‚Ññ{book_number}")
    await message.answer('–ù–û —Å–Ω–∞—á–∞–ª–∞ –∫–∏–Ω–µ–º —à–∞—Ä:')
    await message.answer_dice('üé≥')

# –¢–æ–Ω–∫–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
@dp.message(F.text)
async def echo_with_time(message: Message):
    time_now = datetime.now().strftime('%H:%M')
    underline_time = html.underline(f'–°–æ–∑–¥–∞–Ω–æ –≤ {time_now}')
    await message.answer(f"{message.text}\n{underline_time}") # –≤–µ—Ä–Ω–µ—Ç –ù–ï–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    await message.answer(f"{message.html_text}\n{underline_time}") # –≤–µ—Ä–Ω–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    # await message.answer(f"{message.mk_text}\n{underline_time}") # –µ—Å–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –º–∞—Ä–∫–¥–∞—É–Ω


async def main():
    await dp.start_polling(bot) #

if __name__ == "__main__":
    asyncio.run(main())